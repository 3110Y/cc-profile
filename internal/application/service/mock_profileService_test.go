// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/3110Y/profile/internal/application/service (interfaces: ProfileRepositoryInterface,PasswordServiceInterface)

// Package service is a generated GoMock package.
package service

import (
	context "context"
	reflect "reflect"

	entity "github.com/3110Y/profile/internal/domain/entity"
	gomock "github.com/golang/mock/gomock"
)

// MockProfileRepositoryInterface is a mock of ProfileRepositoryInterface interface.
type MockProfileRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockProfileRepositoryInterfaceMockRecorder
}

// MockProfileRepositoryInterfaceMockRecorder is the mock recorder for MockProfileRepositoryInterface.
type MockProfileRepositoryInterfaceMockRecorder struct {
	mock *MockProfileRepositoryInterface
}

// NewMockProfileRepositoryInterface creates a new mock instance.
func NewMockProfileRepositoryInterface(ctrl *gomock.Controller) *MockProfileRepositoryInterface {
	mock := &MockProfileRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockProfileRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProfileRepositoryInterface) EXPECT() *MockProfileRepositoryInterfaceMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockProfileRepositoryInterface) Add(arg0 context.Context, arg1 entity.Profile) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", arg0, arg1)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Add indicates an expected call of Add.
func (mr *MockProfileRepositoryInterfaceMockRecorder) Add(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockProfileRepositoryInterface)(nil).Add), arg0, arg1)
}

// ChangePassword mocks base method.
func (m *MockProfileRepositoryInterface) ChangePassword(arg0 context.Context, arg1 entity.Profile) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangePassword", arg0, arg1)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChangePassword indicates an expected call of ChangePassword.
func (mr *MockProfileRepositoryInterfaceMockRecorder) ChangePassword(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangePassword", reflect.TypeOf((*MockProfileRepositoryInterface)(nil).ChangePassword), arg0, arg1)
}

// Count mocks base method.
func (m *MockProfileRepositoryInterface) Count(arg0 context.Context) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count", arg0)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count.
func (mr *MockProfileRepositoryInterfaceMockRecorder) Count(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockProfileRepositoryInterface)(nil).Count), arg0)
}

// Delete mocks base method.
func (m *MockProfileRepositoryInterface) Delete(arg0 context.Context, arg1 string) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockProfileRepositoryInterfaceMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockProfileRepositoryInterface)(nil).Delete), arg0, arg1)
}

// Edit mocks base method.
func (m *MockProfileRepositoryInterface) Edit(arg0 context.Context, arg1 entity.Profile) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Edit", arg0, arg1)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Edit indicates an expected call of Edit.
func (mr *MockProfileRepositoryInterfaceMockRecorder) Edit(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Edit", reflect.TypeOf((*MockProfileRepositoryInterface)(nil).Edit), arg0, arg1)
}

// EditWithoutPassword mocks base method.
func (m *MockProfileRepositoryInterface) EditWithoutPassword(arg0 context.Context, arg1 entity.Profile) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditWithoutPassword", arg0, arg1)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EditWithoutPassword indicates an expected call of EditWithoutPassword.
func (mr *MockProfileRepositoryInterfaceMockRecorder) EditWithoutPassword(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditWithoutPassword", reflect.TypeOf((*MockProfileRepositoryInterface)(nil).EditWithoutPassword), arg0, arg1)
}

// Get mocks base method.
func (m *MockProfileRepositoryInterface) Get(arg0 context.Context, arg1 string) (entity.Profile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(entity.Profile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockProfileRepositoryInterfaceMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockProfileRepositoryInterface)(nil).Get), arg0, arg1)
}

// GetByEmailOrPhone mocks base method.
func (m *MockProfileRepositoryInterface) GetByEmailOrPhone(arg0 context.Context, arg1 string, arg2 uint64) (entity.Profile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByEmailOrPhone", arg0, arg1, arg2)
	ret0, _ := ret[0].(entity.Profile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByEmailOrPhone indicates an expected call of GetByEmailOrPhone.
func (mr *MockProfileRepositoryInterfaceMockRecorder) GetByEmailOrPhone(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByEmailOrPhone", reflect.TypeOf((*MockProfileRepositoryInterface)(nil).GetByEmailOrPhone), arg0, arg1, arg2)
}

// List mocks base method.
func (m *MockProfileRepositoryInterface) List(arg0 context.Context, arg1, arg2 uint64) ([]entity.Profile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1, arg2)
	ret0, _ := ret[0].([]entity.Profile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockProfileRepositoryInterfaceMockRecorder) List(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockProfileRepositoryInterface)(nil).List), arg0, arg1, arg2)
}

// MockPasswordServiceInterface is a mock of PasswordServiceInterface interface.
type MockPasswordServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockPasswordServiceInterfaceMockRecorder
}

// MockPasswordServiceInterfaceMockRecorder is the mock recorder for MockPasswordServiceInterface.
type MockPasswordServiceInterfaceMockRecorder struct {
	mock *MockPasswordServiceInterface
}

// NewMockPasswordServiceInterface creates a new mock instance.
func NewMockPasswordServiceInterface(ctrl *gomock.Controller) *MockPasswordServiceInterface {
	mock := &MockPasswordServiceInterface{ctrl: ctrl}
	mock.recorder = &MockPasswordServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPasswordServiceInterface) EXPECT() *MockPasswordServiceInterfaceMockRecorder {
	return m.recorder
}

// Encode mocks base method.
func (m *MockPasswordServiceInterface) Encode(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Encode", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Encode indicates an expected call of Encode.
func (mr *MockPasswordServiceInterfaceMockRecorder) Encode(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Encode", reflect.TypeOf((*MockPasswordServiceInterface)(nil).Encode), arg0)
}
