// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package di

import (
	"github.com/3110Y/profile/internal/application/service"
	"github.com/3110Y/profile/internal/application/validator"
	"github.com/3110Y/profile/internal/infrastructure/database"
	"github.com/3110Y/profile/internal/infrastructure/repository"
	"github.com/3110Y/profile/internal/presentation/rpc"
	"github.com/jmoiron/sqlx"
 )

// Injectors from wire.go:

func InitializeDI() (*DI, error) {
	db, err := database.NewConnect()
	if err != nil {
		return nil, err
	}
	profileRepository := repository.NewProfileRepository(db)
	passwordService := service.NewPasswordService()
	profileService := service.NewProfileService(profileRepository, passwordService)
	profileValidator := validator.NewProfileValidator()
	profileRPC := rpc.NewProfileRPC(profileService, profileValidator)
	di := NewDI(profileService, profileValidator, profileRepository, profileRPC, db)
	return di, nil
}

// wire.go:

type DI struct {
	ProfileService    *service.ProfileService
	ProfileValidator  *validator.ProfileValidator
	ProfileRepository *repository.ProfileRepository
	ProfileRPC        *rpc.ProfileRPC
	DB                *sqlx.DB
}

func NewDI(
	profileService *service.ProfileService,
	profileValidator *validator.ProfileValidator,
	profileRepository *repository.ProfileRepository,
	profileRPC *rpc.ProfileRPC,
	DB *sqlx.DB,
) *DI {
	return &DI{
		ProfileService:    profileService,
		ProfileValidator:  profileValidator,
		ProfileRepository: profileRepository,
		ProfileRPC:        profileRPC,
		DB:                DB,
	}
}
